//
// PISAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PISAPI { 
    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_domestic: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_domestic: String { 
        case _8 = "utf-8"
    }
    /**
     Initiate domestic transfer
     - parameter body: (body) Data for domestic transfer      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func domestic(body: PaymentDomesticRequest, authorization: String, acceptEncoding: AcceptEncoding_domestic, acceptLanguage: String, acceptCharset: AcceptCharset_domestic, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: AddPaymentResponse?,_ error: Error?) -> Void)) {
        domesticWithRequestBuilder(body: body, authorization: authorization, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Initiate domestic transfer
     - POST /v1.0/payments/v1.0/domestic
     - OAuth:
       - type: oauth2
       - name: xs2a_auth
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - parameter body: (body) Data for domestic transfer      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<AddPaymentResponse> 
     */
    open class func domesticWithRequestBuilder(body: PaymentDomesticRequest, authorization: String, acceptEncoding: AcceptEncoding_domestic, acceptLanguage: String, acceptCharset: AcceptCharset_domestic, X_JWS_SIGNATURE: String) -> RequestBuilder<AddPaymentResponse> {
        let path = "/v1.0/payments/v1.0/domestic"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization,
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AddPaymentResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_eEA: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_eEA: String { 
        case _8 = "utf-8"
    }
    /**
     Initiate SEPA foreign transfers
     - parameter body: (body) Data for SEPA foreign transfer      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eEA(body: PaymentEEARequest, authorization: String, acceptEncoding: AcceptEncoding_eEA, acceptLanguage: String, acceptCharset: AcceptCharset_eEA, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: AddPaymentResponse?,_ error: Error?) -> Void)) {
        eEAWithRequestBuilder(body: body, authorization: authorization, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Initiate SEPA foreign transfers
     - POST /v1.0/payments/v1.0/EEA
     - OAuth:
       - type: oauth2
       - name: xs2a_auth
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - parameter body: (body) Data for SEPA foreign transfer      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<AddPaymentResponse> 
     */
    open class func eEAWithRequestBuilder(body: PaymentEEARequest, authorization: String, acceptEncoding: AcceptEncoding_eEA, acceptLanguage: String, acceptCharset: AcceptCharset_eEA, X_JWS_SIGNATURE: String) -> RequestBuilder<AddPaymentResponse> {
        let path = "/v1.0/payments/v1.0/EEA"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization,
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AddPaymentResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_getMultiplePayments: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_getMultiplePayments: String { 
        case _8 = "utf-8"
    }
    /**
     Get the status of multiple payments
     - parameter body: (body) Payments ID list      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMultiplePayments(body: PaymentsRequest, authorization: String, acceptEncoding: AcceptEncoding_getMultiplePayments, acceptLanguage: String, acceptCharset: AcceptCharset_getMultiplePayments, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: PaymentsResponse?,_ error: Error?) -> Void)) {
        getMultiplePaymentsWithRequestBuilder(body: body, authorization: authorization, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the status of multiple payments
     - POST /v1.0/payments/v1.0/getMultiplePayments
     - OAuth:
       - type: oauth2
       - name: xs2a_auth
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - parameter body: (body) Payments ID list      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<PaymentsResponse> 
     */
    open class func getMultiplePaymentsWithRequestBuilder(body: PaymentsRequest, authorization: String, acceptEncoding: AcceptEncoding_getMultiplePayments, acceptLanguage: String, acceptCharset: AcceptCharset_getMultiplePayments, X_JWS_SIGNATURE: String) -> RequestBuilder<PaymentsResponse> {
        let path = "/v1.0/payments/v1.0/getMultiplePayments"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization,
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PaymentsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_getPayment: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_getPayment: String { 
        case _8 = "utf-8"
    }
    /**
     Get the status of payment
     - parameter body: (body) Payment ID      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPayment(body: PaymentRequest, authorization: String, acceptEncoding: AcceptEncoding_getPayment, acceptLanguage: String, acceptCharset: AcceptCharset_getPayment, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: GetPaymentResponse?,_ error: Error?) -> Void)) {
        getPaymentWithRequestBuilder(body: body, authorization: authorization, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the status of payment
     - POST /v1.0/payments/v1.0/getPayment
     - OAuth:
       - type: oauth2
       - name: xs2a_auth
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - parameter body: (body) Payment ID      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<GetPaymentResponse> 
     */
    open class func getPaymentWithRequestBuilder(body: PaymentRequest, authorization: String, acceptEncoding: AcceptEncoding_getPayment, acceptLanguage: String, acceptCharset: AcceptCharset_getPayment, X_JWS_SIGNATURE: String) -> RequestBuilder<GetPaymentResponse> {
        let path = "/v1.0/payments/v1.0/getPayment"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization,
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetPaymentResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_nonEEA: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_nonEEA: String { 
        case _8 = "utf-8"
    }
    /**
     Initiate non SEPA foreign transfers
     - parameter body: (body) Data for non SEPA foreign transfer      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func nonEEA(body: PaymentNonEEARequest, authorization: String, acceptEncoding: AcceptEncoding_nonEEA, acceptLanguage: String, acceptCharset: AcceptCharset_nonEEA, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: AddPaymentResponse?,_ error: Error?) -> Void)) {
        nonEEAWithRequestBuilder(body: body, authorization: authorization, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Initiate non SEPA foreign transfers
     - POST /v1.0/payments/v1.0/nonEEA
     - OAuth:
       - type: oauth2
       - name: xs2a_auth
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - parameter body: (body) Data for non SEPA foreign transfer      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<AddPaymentResponse> 
     */
    open class func nonEEAWithRequestBuilder(body: PaymentNonEEARequest, authorization: String, acceptEncoding: AcceptEncoding_nonEEA, acceptLanguage: String, acceptCharset: AcceptCharset_nonEEA, X_JWS_SIGNATURE: String) -> RequestBuilder<AddPaymentResponse> {
        let path = "/v1.0/payments/v1.0/nonEEA"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization,
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AddPaymentResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_tax: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_tax: String { 
        case _8 = "utf-8"
    }
    /**
     Initiate tax transfer
     - parameter body: (body) Data for tax transfer      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tax(body: PaymentTaxRequest, authorization: String, acceptEncoding: AcceptEncoding_tax, acceptLanguage: String, acceptCharset: AcceptCharset_tax, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: AddPaymentResponse?,_ error: Error?) -> Void)) {
        taxWithRequestBuilder(body: body, authorization: authorization, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Initiate tax transfer
     - POST /v1.0/payments/v1.0/tax
     - OAuth:
       - type: oauth2
       - name: xs2a_auth
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - parameter body: (body) Data for tax transfer      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<AddPaymentResponse> 
     */
    open class func taxWithRequestBuilder(body: PaymentTaxRequest, authorization: String, acceptEncoding: AcceptEncoding_tax, acceptLanguage: String, acceptCharset: AcceptCharset_tax, X_JWS_SIGNATURE: String) -> RequestBuilder<AddPaymentResponse> {
        let path = "/v1.0/payments/v1.0/tax"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization,
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AddPaymentResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }

}
