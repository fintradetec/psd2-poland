//
// AISAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AISAPI { 
    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_deleteConsent: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_deleteConsent: String { 
        case _8 = "utf-8"
    }
    /**
     Removes consent
     - parameter body: (body) Data for delete Consent Request      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteConsent(body: DeleteConsentRequest, acceptEncoding: AcceptEncoding_deleteConsent, acceptLanguage: String, acceptCharset: AcceptCharset_deleteConsent, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteConsentWithRequestBuilder(body: body, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Removes consent
     - POST /v1.0/accounts/v1.0/deleteConsent
     - Removes consent
     - responseHeaders: [Content-Encoding(String)]
     - parameter body: (body) Data for delete Consent Request      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteConsentWithRequestBuilder(body: DeleteConsentRequest, acceptEncoding: AcceptEncoding_deleteConsent, acceptLanguage: String, acceptCharset: AcceptCharset_deleteConsent) -> RequestBuilder<Void> {
        let path = "/v1.0/accounts/v1.0/deleteConsent"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_getAccount: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_getAccount: String { 
        case _8 = "utf-8"
    }
    /**
     Get detailed information about user payment account
     - parameter body: (body) Data for Account Request      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccount(body: AccountInfoRequest, authorization: String, acceptEncoding: AcceptEncoding_getAccount, acceptLanguage: String, acceptCharset: AcceptCharset_getAccount, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: AccountResponse?,_ error: Error?) -> Void)) {
        getAccountWithRequestBuilder(body: body, authorization: authorization, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get detailed information about user payment account
     - POST /v1.0/accounts/v1.0/getAccount
     - User identification based on access token
     - OAuth:
       - type: oauth2
       - name: xs2a_auth
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - parameter body: (body) Data for Account Request      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<AccountResponse> 
     */
    open class func getAccountWithRequestBuilder(body: AccountInfoRequest, authorization: String, acceptEncoding: AcceptEncoding_getAccount, acceptLanguage: String, acceptCharset: AcceptCharset_getAccount, X_JWS_SIGNATURE: String) -> RequestBuilder<AccountResponse> {
        let path = "/v1.0/accounts/v1.0/getAccount"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization,
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AccountResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_getAccounts: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_getAccounts: String { 
        case _8 = "utf-8"
    }
    /**
     Get information about all user's payment account
     - parameter body: (body) Data for Accounts Request      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccounts(body: AccountsRequest, authorization: String, acceptEncoding: AcceptEncoding_getAccounts, acceptLanguage: String, acceptCharset: AcceptCharset_getAccounts, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: AccountsResponse?,_ error: Error?) -> Void)) {
        getAccountsWithRequestBuilder(body: body, authorization: authorization, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get information about all user's payment account
     - POST /v1.0/accounts/v1.0/getAccounts
     - User identification based on access token
     - OAuth:
       - type: oauth2
       - name: xs2a_auth
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - parameter body: (body) Data for Accounts Request      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<AccountsResponse> 
     */
    open class func getAccountsWithRequestBuilder(body: AccountsRequest, authorization: String, acceptEncoding: AcceptEncoding_getAccounts, acceptLanguage: String, acceptCharset: AcceptCharset_getAccounts, X_JWS_SIGNATURE: String) -> RequestBuilder<AccountsResponse> {
        let path = "/v1.0/accounts/v1.0/getAccounts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization,
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AccountsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_getHolds: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_getHolds: String { 
        case _8 = "utf-8"
    }
    /**
     Get list of user's holded operations
     - parameter body: (body) Data for hold Request      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHolds(body: TransactionHoldRequest, authorization: String, acceptEncoding: AcceptEncoding_getHolds, acceptLanguage: String, acceptCharset: AcceptCharset_getHolds, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: TransactionHoldInfoResponse?,_ error: Error?) -> Void)) {
        getHoldsWithRequestBuilder(body: body, authorization: authorization, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get list of user's holded operations
     - POST /v1.0/accounts/v1.0/getHolds
     - OAuth:
       - type: oauth2
       - name: xs2a_auth
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - parameter body: (body) Data for hold Request      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<TransactionHoldInfoResponse> 
     */
    open class func getHoldsWithRequestBuilder(body: TransactionHoldRequest, authorization: String, acceptEncoding: AcceptEncoding_getHolds, acceptLanguage: String, acceptCharset: AcceptCharset_getHolds, X_JWS_SIGNATURE: String) -> RequestBuilder<TransactionHoldInfoResponse> {
        let path = "/v1.0/accounts/v1.0/getHolds"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization,
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TransactionHoldInfoResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_getTransactionDetail: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_getTransactionDetail: String { 
        case _8 = "utf-8"
    }
    /**
     Get detailed information about user's single transaction
     - parameter body: (body) Data for transation detail Request      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTransactionDetail(body: TransactionDetailRequest, authorization: String, acceptEncoding: AcceptEncoding_getTransactionDetail, acceptLanguage: String, acceptCharset: AcceptCharset_getTransactionDetail, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: TransactionDetailResponse?,_ error: Error?) -> Void)) {
        getTransactionDetailWithRequestBuilder(body: body, authorization: authorization, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get detailed information about user's single transaction
     - POST /v1.0/accounts/v1.0/getTransactionDetail
     - OAuth:
       - type: oauth2
       - name: xs2a_auth
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - parameter body: (body) Data for transation detail Request      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<TransactionDetailResponse> 
     */
    open class func getTransactionDetailWithRequestBuilder(body: TransactionDetailRequest, authorization: String, acceptEncoding: AcceptEncoding_getTransactionDetail, acceptLanguage: String, acceptCharset: AcceptCharset_getTransactionDetail, X_JWS_SIGNATURE: String) -> RequestBuilder<TransactionDetailResponse> {
        let path = "/v1.0/accounts/v1.0/getTransactionDetail"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization,
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TransactionDetailResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_getTransactionsDone: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_getTransactionsDone: String { 
        case _8 = "utf-8"
    }
    /**
     Get list of user done transactions
     - parameter body: (body) Data for Transactions Done Request      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTransactionsDone(body: TransactionInfoRequest, authorization: String, acceptEncoding: AcceptEncoding_getTransactionsDone, acceptLanguage: String, acceptCharset: AcceptCharset_getTransactionsDone, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: TransactionsDoneInfoResponse?,_ error: Error?) -> Void)) {
        getTransactionsDoneWithRequestBuilder(body: body, authorization: authorization, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get list of user done transactions
     - POST /v1.0/accounts/v1.0/getTransactionsDone
     - OAuth:
       - type: oauth2
       - name: xs2a_auth
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - parameter body: (body) Data for Transactions Done Request      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<TransactionsDoneInfoResponse> 
     */
    open class func getTransactionsDoneWithRequestBuilder(body: TransactionInfoRequest, authorization: String, acceptEncoding: AcceptEncoding_getTransactionsDone, acceptLanguage: String, acceptCharset: AcceptCharset_getTransactionsDone, X_JWS_SIGNATURE: String) -> RequestBuilder<TransactionsDoneInfoResponse> {
        let path = "/v1.0/accounts/v1.0/getTransactionsDone"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization,
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TransactionsDoneInfoResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_getTransactionsPending: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_getTransactionsPending: String { 
        case _8 = "utf-8"
    }
    /**
     Get list of user's pending transactions
     - parameter body: (body) Data for Transactions Pending Request      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTransactionsPending(body: TransactionInfoRequest, authorization: String, acceptEncoding: AcceptEncoding_getTransactionsPending, acceptLanguage: String, acceptCharset: AcceptCharset_getTransactionsPending, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: TransactionPendingInfoResponse?,_ error: Error?) -> Void)) {
        getTransactionsPendingWithRequestBuilder(body: body, authorization: authorization, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get list of user's pending transactions
     - POST /v1.0/accounts/v1.0/getTransactionsPending
     - OAuth:
       - type: oauth2
       - name: xs2a_auth
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - parameter body: (body) Data for Transactions Pending Request      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<TransactionPendingInfoResponse> 
     */
    open class func getTransactionsPendingWithRequestBuilder(body: TransactionInfoRequest, authorization: String, acceptEncoding: AcceptEncoding_getTransactionsPending, acceptLanguage: String, acceptCharset: AcceptCharset_getTransactionsPending, X_JWS_SIGNATURE: String) -> RequestBuilder<TransactionPendingInfoResponse> {
        let path = "/v1.0/accounts/v1.0/getTransactionsPending"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization,
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TransactionPendingInfoResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_getTransactionsRejected: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_getTransactionsRejected: String { 
        case _8 = "utf-8"
    }
    /**
     Get list of user's rejected transactions
     - parameter body: (body) Data for Transactions Rejected Request      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTransactionsRejected(body: TransactionInfoRequest, authorization: String, acceptEncoding: AcceptEncoding_getTransactionsRejected, acceptLanguage: String, acceptCharset: AcceptCharset_getTransactionsRejected, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: TransactionRejectedInfoResponse?,_ error: Error?) -> Void)) {
        getTransactionsRejectedWithRequestBuilder(body: body, authorization: authorization, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get list of user's rejected transactions
     - POST /v1.0/accounts/v1.0/getTransactionsRejected
     - OAuth:
       - type: oauth2
       - name: xs2a_auth
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - parameter body: (body) Data for Transactions Rejected Request      - parameter authorization: (header) The value of the Authorization header should consist of &#x27;type&#x27; + &#x27;credentials&#x27;, where for the approach using the &#x27;type&#x27; token should be &#x27;Bearer&#x27;.      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<TransactionRejectedInfoResponse> 
     */
    open class func getTransactionsRejectedWithRequestBuilder(body: TransactionInfoRequest, authorization: String, acceptEncoding: AcceptEncoding_getTransactionsRejected, acceptLanguage: String, acceptCharset: AcceptCharset_getTransactionsRejected, X_JWS_SIGNATURE: String) -> RequestBuilder<TransactionRejectedInfoResponse> {
        let path = "/v1.0/accounts/v1.0/getTransactionsRejected"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization,
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TransactionRejectedInfoResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }

}
