//
// ASAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ASAPI { 
    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_authorize: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_authorize: String { 
        case _8 = "utf-8"
    }
    /**
     Requests OAuth2 authorization code
     - parameter body: (body) Data for OAuth2 Authorization Code Request      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authorize(body: AuthorizeRequest, acceptEncoding: AcceptEncoding_authorize, acceptLanguage: String, acceptCharset: AcceptCharset_authorize, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        authorizeWithRequestBuilder(body: body, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Requests OAuth2 authorization code
     - POST /v1.0/auth/v1.0/authorize
     - Requests OAuth2 authorization code
     - parameter body: (body) Data for OAuth2 Authorization Code Request      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<Void> 
     */
    open class func authorizeWithRequestBuilder(body: AuthorizeRequest, acceptEncoding: AcceptEncoding_authorize, acceptLanguage: String, acceptCharset: AcceptCharset_authorize, X_JWS_SIGNATURE: String) -> RequestBuilder<Void> {
        let path = "/v1.0/auth/v1.0/authorize"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_authorizeExt: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_authorizeExt: String { 
        case _8 = "utf-8"
    }
    /**
     Requests OAuth2 authorization code based on One-time authorization code issued by External Authorization Tool
     - parameter body: (body) Data for OAuth2 Authorization Code Request extended for EAT based authentication and callback response      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authorizeExt(body: EatCodeRequest, acceptEncoding: AcceptEncoding_authorizeExt, acceptLanguage: String, acceptCharset: AcceptCharset_authorizeExt, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        authorizeExtWithRequestBuilder(body: body, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Requests OAuth2 authorization code based on One-time authorization code issued by External Authorization Tool
     - POST /v1.0/auth/v1.0/authorizeExt
     - Requests OAuth2 authorization code based One-time authorization code issued by External Authorization Tool. Authorization code will be delivered to TPP as callback request from ASPSP if PSU authentication is confirmed by EAT. Callback function must provide similar notification also in case of unsuccessful authentication or its abandonment.
     - responseHeaders: [Content-Encoding(String)]
     - parameter body: (body) Data for OAuth2 Authorization Code Request extended for EAT based authentication and callback response      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<Void> 
     */
    open class func authorizeExtWithRequestBuilder(body: EatCodeRequest, acceptEncoding: AcceptEncoding_authorizeExt, acceptLanguage: String, acceptCharset: AcceptCharset_authorizeExt, X_JWS_SIGNATURE: String) -> RequestBuilder<Void> {
        let path = "/v1.0/auth/v1.0/authorizeExt"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }


    /**
     * enum for parameter acceptEncoding
     */
    public enum AcceptEncoding_token: String { 
        case gzip = "gzip"
        case deflate = "deflate"
    }

    /**
     * enum for parameter acceptCharset
     */
    public enum AcceptCharset_token: String { 
        case _8 = "utf-8"
    }
    /**
     Requests OAuth2 access token value
     - parameter body: (body) Data for OAuth2 Access Token Request      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func token(body: TokenRequest, acceptEncoding: AcceptEncoding_token, acceptLanguage: String, acceptCharset: AcceptCharset_token, X_JWS_SIGNATURE: String, completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        tokenWithRequestBuilder(body: body, acceptEncoding: acceptEncoding, acceptLanguage: acceptLanguage, acceptCharset: acceptCharset, X_JWS_SIGNATURE: X_JWS_SIGNATURE).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Requests OAuth2 access token value
     - POST /v1.0/auth/v1.0/token
     - Requests OAuth2 access token value
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - responseHeaders: [Content-Encoding(String), X-JWS-SIGNATURE(String)]
     - parameter body: (body) Data for OAuth2 Access Token Request      - parameter acceptEncoding: (header) Gzip, deflate      - parameter acceptLanguage: (header) Prefered language of response      - parameter acceptCharset: (header) UTF-8      - parameter X_JWS_SIGNATURE: (header) Detached JWS signature of the body of the payload 

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func tokenWithRequestBuilder(body: TokenRequest, acceptEncoding: AcceptEncoding_token, acceptLanguage: String, acceptCharset: AcceptCharset_token, X_JWS_SIGNATURE: String) -> RequestBuilder<TokenResponse> {
        let path = "/v1.0/auth/v1.0/token"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Accept-Encoding": acceptEncoding.rawValue,
                        "Accept-Language": acceptLanguage,
                        "Accept-Charset": acceptCharset.rawValue,
                        "X-JWS-SIGNATURE": X_JWS_SIGNATURE
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: , headers: headerParameters)
    }

}
