//
// TokenRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

/** Klasa zapytania o uzyskanie tokena dostępowego zgodnego z OAuth2 */
public struct TokenRequest: Codable {


    public var requestHeader: RequestHeaderWithoutToken?

    /** Typ zastosowanej autoryzacji. Jedna z wartości: authorization_code, refresh_token, exchange_token (rozszerzenie standardu OAuth2) */
    public var grantType: String

    /** Kod autoryzacji uzyskany podczas żądania do usługi /authorize OAuth2. Wymagany dla grant_type&#x3D;authorization_code. */
    public var code: String?

    /** Adres usługi TPP, na które zostanie wykonane przekierowanie po wygenerowaniu tokena dostępowego przez ASPSP. Wymagany dla grant_type&#x3D;authorization_code. */
    public var redirectUri: String?

    /** Identyfikator TPP. Wymagany dla grant_type&#x3D;authorization_code. */
    public var clientId: String?

    /** Wartość tokena, który służy do uzyskania nowego tokena dostępowego dla tego samego zakresu zgód (scope, scope_details) w przypadku gdy pierwotny token utraci swoją ważność. Wymagany dla grant_type&#x3D;refresh_token. */
    public var refreshToken: String?

    /** Wartość tokena, który służy do uzyskania nowego tokena dostępowego dla innego zakresu zgód (scope, scope_details). Wartością tego parametru powinien być token dostępowy ważnej sesji komuikacyjnej z interfejsem XS2A. Wymagany dla grant_type&#x3D;exchange_token. */
    public var exchangeToken: String?

    /** Typy zgód o które prosi TPP. Lista identyfikatorów zgodna ze specyfikacją standardu Polish API. */
    public var scope: String?

    public var scopeDetails: ScopeDetailsInput?

    /** Określa czy dana sesja jest związana z interakcją z PSU – wartości true/false. Rozszerzenie standardu OAuth2. */
    public var isUserSession: Bool?

    /** IP przeglądarki użytkownika (informacja na potrzeby fraud detection). Rozszerzenie standardu OAuth2. Wymagany dla grant_type&#x3D;refresh_token. */
    public var userIp: String?

    /** Informacja dotycząca wersji przeglądarki użytkownika (informacja na potrzeby fraud detection). Rozszerzenie standardu OAuth2. Wymagany dla grant_type&#x3D;refresh_token. */
    public var userAgent: String?
    public init(requestHeader: RequestHeaderWithoutToken?, grantType: String, code: String?, redirectUri: String?, clientId: String?, refreshToken: String?, exchangeToken: String?, scope: String?, scopeDetails: ScopeDetailsInput?, isUserSession: Bool?, userIp: String?, userAgent: String?) { 
        self.requestHeader = requestHeader
        self.grantType = grantType
        self.code = code
        self.redirectUri = redirectUri
        self.clientId = clientId
        self.refreshToken = refreshToken
        self.exchangeToken = exchangeToken
        self.scope = scope
        self.scopeDetails = scopeDetails
        self.isUserSession = isUserSession
        self.userIp = userIp
        self.userAgent = userAgent
    }
    public enum CodingKeys: String, CodingKey { 
        case requestHeader
        case grantType = "grant_type"
        case code = "Code"
        case redirectUri = "redirect_uri"
        case clientId = "client_id"
        case refreshToken = "refresh_token"
        case exchangeToken = "exchange_token"
        case scope
        case scopeDetails = "scope_details"
        case isUserSession = "is_user_session"
        case userIp = "user_ip"
        case userAgent = "user_agent"
    }

}
